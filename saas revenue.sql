use saas_revenue_db;

--- 1 MRR (Monthly Recurring Revenue) per Subscription Type
 -- Find the total monthly recurring revenue for each subscription type.
 -- This will give an overview of the total revenue generated from each subscription type, 
 -- which can guide decisions on pricing, customer acquisition, etc.
 
 SELECT 
    ROUND(SUM(monthly_revenue), 2) AS monthly_rev,
    subscription_type AS sub_type
FROM
    subscriptions
GROUP BY subscription_type;


-- 2 Churn Rate per Subscription Type
--  Query to calculate the churn rate for each subscription type.
-- This will help identify which subscription types are experiencing higher churn rates, 
-- enabling the business to act on improving retention strategies for those segments.


Select subscription_type as sub_type,avg(churned) as churn_rate
from subscriptions
GROUP BY subscription_type;


-- 3 Customer Lifetime Value (CLV)
-- Query to estimate the customer lifetime value based on the months active and average monthly revenue.
-- CLV is a key metric to understand how valuable a customer is over their entire relationship with the company. 


SELECT subscription_type,
      Round(AVG(monthly_revenue * months_active),2) AS estimated_clv
FROM subscriptions
GROUP BY subscription_type;


-- 4 Customer Acquisition Cost (CAC) vs Revenue
-- Query to calculate the ratio of customer acquisition cost to the revenue generated by each customer.


SELECT 
    ROUND(AVG(customer_acquisition_cost), 2) AS avg_cac,
    ROUND(AVG(monthly_revenue * months_active), 2) AS avg_clv,
    ROUND(AVG(monthly_revenue * months_active) / AVG(customer_acquisition_cost), 2) AS clv_to_cac_ratio
FROM subscriptions;


-- 💥 Strategic Take:
-- If CLV:CAC ratio is >3, we’re doing great. If it's <1, we're bleeding money per customer. 

-- 5 Monthly Revenue Trend
-- Query to track the monthly revenue growth over time.

SELECT 
    DATE_FORMAT(c.signup_date, '%Y-%m') AS month,
    SUM(s.monthly_revenue) AS total_monthly_revenue
FROM customers c
JOIN 
subscriptions s 
ON c.customer_id = s.customer_id
GROUP BY DATE_FORMAT(c.signup_date, '%Y-%m')
ORDER BY month;



-- Explanation:
-- JOIN customers c ON s.customer_id = c.customer_id: This joins subscriptions table (alias s) with customers table (alias c) 
-- based on the shared customer_id. 
-- DATE_FORMAT(c.signup_date, '%Y-%m') AS month: The DATE_FORMAT function extracts the year and month from the signup_date,
--  it allows to group data by month.
-- SUM(s.monthly_revenue): This sums up the monthly revenue for each group (each month).
-- GROUP BY and ORDER BY ensure that the data is grouped and sorted chronologically.


-- 6 Profit Impact of Churn on Monthly Revenue
-- Query to simulate the impact of churn on monthly revenue.
-- Steps to achieve goal--- broken down
-- Group data by month (based on signup_date from the customers table)

SELECT 
    DATE_FORMAT(c.signup_date, '%Y-%m') AS month,
    SUM(s.monthly_revenue) AS total_revenue
FROM subscriptions s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY DATE_FORMAT(c.signup_date, '%Y-%m')
ORDER BY month;


-- Step 2: Adding Revenue Lost Due to Churn
-- Calculate revenue from churned customers (the "loss")

SELECT 
    DATE_FORMAT(c.signup_date, '%Y-%m') AS month,
    SUM(s.monthly_revenue) AS total_revenue,
    SUM(CASE WHEN s.churned = 1 THEN s.monthly_revenue ELSE 0 END) AS churn_revenue_loss
FROM subscriptions s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY DATE_FORMAT(c.signup_date, '%Y-%m')
ORDER BY month;


-- 3 Calculate revenue from active customers
SELECT 
    DATE_FORMAT(c.signup_date, '%Y-%m') AS month,
    SUM(s.monthly_revenue) AS total_revenue,
    SUM(CASE WHEN s.churned = 1 THEN s.monthly_revenue ELSE 0 END) AS churn_revenue_loss,
    SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END) AS active_revenue
FROM subscriptions s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY DATE_FORMAT(c.signup_date, '%Y-%m')
ORDER BY month;


-- 4 Simulate an additional loss of 5% from active revenue
SELECT 
    DATE_FORMAT(c.signup_date, '%Y-%m') AS month,
    SUM(s.monthly_revenue) AS total_revenue,
    SUM(CASE WHEN s.churned = 1 THEN s.monthly_revenue ELSE 0 END) AS churn_revenue_loss,
    SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END) AS active_revenue,
    ROUND(0.05 * SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END), 2) AS additional_revenue_loss
FROM subscriptions s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY DATE_FORMAT(c.signup_date, '%Y-%m')
ORDER BY month;


-- 5 Combine these to estimate projected net revenue after extra churn
SELECT 
    DATE_FORMAT(c.signup_date, '%Y-%m') AS month,
    SUM(s.monthly_revenue) AS total_revenue,
    SUM(CASE WHEN s.churned = 1 THEN s.monthly_revenue ELSE 0 END) AS churn_revenue_loss,
    SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END) AS active_revenue,
    ROUND(0.05 * SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END), 2) AS additional_revenue_loss,
    ROUND(SUM(s.monthly_revenue) - 0.05 * SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END), 2) AS projected_net_revenue_after_extra_churn
FROM subscriptions s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY DATE_FORMAT(c.signup_date, '%Y-%m')
ORDER BY month;

-- projected_net_revenue_after_extra_churn subtracts the additional revenue loss from the total revenue to get the projected net revenue.

-- Combined query
SELECT 
    DATE_FORMAT(c.signup_date, '%Y-%m') AS month,
    COUNT(*) AS total_customers,
    SUM(s.monthly_revenue) AS total_revenue,
    SUM(CASE WHEN s.churned = 1 THEN s.monthly_revenue ELSE 0 END) AS churn_revenue_loss,
    ROUND((SUM(CASE WHEN s.churned = 1 THEN s.monthly_revenue ELSE 0 END) / SUM(s.monthly_revenue)) * 100, 2) AS current_churn_percentage,
    SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END) AS active_revenue,
    ROUND(0.05 * SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END), 2) AS additional_revenue_loss,
    ROUND(SUM(s.monthly_revenue) - 0.05 * SUM(CASE WHEN s.churned = 0 THEN s.monthly_revenue ELSE 0 END), 2) AS projected_net_revenue_after_extra_churn
FROM subscriptions s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY month
ORDER BY month;

-- analogy to understand the query 
-- Imagine Revenue as a Pie
-- Total Revenue (Whole Pie):
-- Think of it as all the money coming in every month.
-- The first part of query sums up all the monthly revenue.
-- Churn Revenue Loss (Eaten Slice):
-- Some of our customers have left, so part of that revenue is “lost” (or has been eaten away).
-- We calculate this by looking at the revenue from customers marked as churned.
-- Active Revenue (Remaining Slice):This is the money coming from customers who haven’t left.
-- We sum up the revenue for those who are still active.
-- Simulated Additional Revenue Loss (Extra Bite):
-- Now, imagine if another 5% of the remaining (active) revenue is lost. 
-- That’s like someone taking an extra small bite out of your pie.
-- We multiply 5% by the active revenue to see how much extra revenue could disappear.
-- Projected Net Revenue After Extra Churn (Final Pie Size):
-- Finally, we subtract that extra loss from the whole pie (total revenue) to see what we’d have left if churn got 5% worse.
-- This gives  an idea of how sensitive our revenue is to churn.

-- 7 Top 5 Highest Revenue-Generating Customers
-- Query to find the top 5 customers who generate the most revenue.

SELECT customer_id AS custm_id,
       ROUND(SUM(monthly_revenue), 2) AS monthly_rev
FROM subscriptions
WHERE churned = 0
GROUP BY customer_id
ORDER BY monthly_rev DESC
LIMIT 5;

-- 8 Revenue by Customer Acquisition Cost
-- Query to compare monthly revenue to customer acquisition cost.
SELECT 
    monthly_revenue AS monthly_rev,
    customer_acquisition_cost AS cac,
    (monthly_revenue - customer_acquisition_cost) AS difference
FROM
    subscriptions;
   
   
   -- 9 Predictive Query: Churn Risk for Each Customer
-- Query to find customers with a high churn risk (e.g., those with a low months active and high churn rate).
SELECT customer_id,
       months_active,
       churned,
       CASE 
           WHEN months_active < 6 AND churned = 1 THEN 'High Risk'
           WHEN months_active BETWEEN 6 AND 12 AND churned = 1 THEN 'Medium Risk'
           ELSE 'Low Risk'
       END AS churn_risk
FROM subscriptions
ORDER BY churn_risk;

-- explanation
-- customer ID: We're focusing on customers who might be at risk of churning.
-- Months Active: If they've been active for fewer months, their risk of churning may be higher.
-- Churned: The churn column helps us define which customers have already churned.
-- Churn Risk: We define risk based on their months active and churned status:
-- High Risk: Customers with fewer than 6 months active and have already churned.
-- Medium Risk: Customers with 6-12 months active and churned.
-- Low Risk: Customers who are more stable (active for a longer period)


-- 9 
SELECT subscription_type,
       COUNT(CASE WHEN months_active >= 3 AND churned = 0 THEN 1 END) AS retained_3_months,
       COUNT(CASE WHEN months_active >= 6 AND churned = 0 THEN 1 END) AS retained_6_months,
       COUNT(CASE WHEN months_active >= 12 AND churned = 0 THEN 1 END) AS retained_12_months
FROM subscriptions
GROUP BY subscription_type
ORDER BY subscription_type;

-- explanation:
-- Subscription Type: We're grouping by subscription type to see retention for each type.

-- Retention at 3 Months: Counts the number of customers who have been active for 3 months and are still active (churned = 0).

-- Retention at 6 Months: Same logic, but for customers who are still active after 6 months.

-- Retention at 12 Months: Similar logic, but for customers who have been active for 12 months and are still active.











